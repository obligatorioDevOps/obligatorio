name: Terraform Plan

on:
  workflow_call:

jobs:
    terraform-plan:    
        name: Terraform validate / Staging        
        runs-on: ubuntu-latest
        env:
          TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}    
           
        steps:
          - name: Check out code
            uses: actions/checkout@v2

          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v1
            with:
              terraform_version: 1.2.1

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-region: us-east-1
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          - name: Initialize Terraform
            run: |
              terraform init -input=false          

          - name: Validate Terraform
            id: vt
            run: |
              terraform validate -no-color
          
          - name: Plan Terraform
            id: plan
            continue-on-error: true
            run: |
              terraform plan -input=false -no-color  
              
          - uses: actions/github-script@v6
            env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
            with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  // 1. Retrieve existing bot comments for the PR
                  const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                  })
                  const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                  })

                  // 2. Prepare format of the comment
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>

                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`

                  </details>

                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
                  
                  <details><summary>Show Plan</summary>
                  
                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`
                  
                  </details>
                  
                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
                  
                  // 3. If we have a comment, update it, otherwise create a new one
                  if (botComment) {
                    github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: botComment.id,
                      body: output
                    })
                  } else {
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                    })
                  }                       
    